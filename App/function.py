import App.user_keyboards as kb

from aiogram.types import BufferedInputFile, ReplyKeyboardRemove
from BotData.database_function import *
from geopy.geocoders import Nominatim

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞, –æ–±–ª–∞—Å—Ç–∏, –æ–∫—Ä—É–≥–∞ –∏ —Å—Ç—Ä–∞–Ω—ã –ø–æ —à–∏—Ä–æ—Ç–µ –∏ –¥–æ–ª–≥–æ—Ç–µ
def get_location_details(latitude, longitude):
    geolocator = Nominatim(user_agent="geoapiExercises")
    location = geolocator.reverse((latitude, longitude), language='ru')
    address = location.raw['address']

    city = address.get('city', '')
    if not city:
        city = address.get('town', '')
    if not city:
        city = address.get('village', '')
    if not city:
        city = address.get('hamlet', '')

    state = address.get('state', '')
    region = address.get('region', '')
    country = address.get('country', '')

    state_list = ['–î–æ–Ω–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–õ—É–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º']
    if state in ['–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º', '–•–µ—Ä—Å–æ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ó–∞–ø–æ—Ä–æ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å']:
        country = '–†–æ—Å—Å–∏—è'
        region = '–Æ–∂–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥'
    elif state in state_list:
        country = '–†–æ—Å—Å–∏—è'
        if state == state_list[0]:
            state = '–î–æ–Ω–µ—Ü–∫–∞—è –ù–∞—Ä–æ–¥–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞'
        elif state == state_list[1]:
            state = '–õ—É–≥–∞–Ω—Å–∫–∞—è –ù–∞—Ä–æ–¥–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞'
        else:
            state = '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º'
        region = '–Æ–∂–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥'

    location_list = [city, state, region, country]
    return location_list

#city, state, region, country = get_location_details(latitude, longitude)
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞, –æ–±–ª–∞—Å—Ç–∏, –æ–∫—Ä—É–≥–∞ –∏ —Å—Ç—Ä–∞–Ω—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
def get_city_details(city_name):
    geolocator = Nominatim(user_agent="GetLoc")

    location = geolocator.geocode(city_name, addressdetails=True, language='ru')

    if location:
        address = location.raw.get('address', {})

        city = address.get('city', '')
        if not city:
            city = address.get('town', '')
        if not city:
            city = address.get('village', '')
        if not city:
            city = address.get('hamlet', '')

        state = address.get('state', '')
        region = address.get('region', '')
        country = address.get('country', '')

        state_list = ['–î–æ–Ω–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–õ—É–≥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º']
        if state in ['–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º', '–•–µ—Ä—Å–æ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ó–∞–ø–æ—Ä–æ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å']:
            country = '–†–æ—Å—Å–∏—è'
            region = '–Æ–∂–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥'
        elif state in state_list:
            country = '–†–æ—Å—Å–∏—è'
            if state == state_list[0]:
                state = '–î–æ–Ω–µ—Ü–∫–∞—è –ù–∞—Ä–æ–¥–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞'
            elif state == state_list[1]:
                state = '–õ—É–≥–∞–Ω—Å–∫–∞—è –ù–∞—Ä–æ–¥–Ω–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞'
            else:
                state = '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö—Ä—ã–º'
            region = '–Æ–∂–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥'

        location_list = [city, state, region, country]
        return location_list
    else:
        return []

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∞–Ω–∫–µ—Ç—ã
async def send_form_to_user(bot, user_id: int, reply_markup=kb.form_menu()):
    photo_bytes = get_photo(user_id)
    list_info_about_user = await get_all_info(user_id)
    name = list_info_about_user[3]
    age = list_info_about_user[4]
    description = list_info_about_user[7] if str(list_info_about_user[7]) != 'None' else ""
    city = list_info_about_user[9]
    state = list_info_about_user[10]
    region = list_info_about_user[11]
    country = list_info_about_user[12]
    caption = str(f"{name}, {age}, {city}\n"
               f"{description}")
    input_file = BufferedInputFile(photo_bytes, filename='image.jpg')
    await bot.send_photo(chat_id=user_id, photo=input_file, caption=caption, reply_markup=reply_markup)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞–Ω–∫–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
async def send_partner_form_to_user(bot, user_id: int, partner_id: int, reply_markup=kb.form_menu(), is_view_like = False):
    photo_bytes = get_photo(partner_id)
    list_info_about_user = await get_all_info(partner_id)
    name = list_info_about_user[3]
    age = list_info_about_user[4]
    description = list_info_about_user[7] if str(list_info_about_user[7]) != 'None' else ""
    city = list_info_about_user[9]
    state = list_info_about_user[10]
    region = list_info_about_user[11]
    country = list_info_about_user[12]
    caption = str(f"{name}, {age}, {city}\n"
               f"{description}")
    input_file = BufferedInputFile(photo_bytes, filename='image.jpg')
    if is_view_like:
        message_to = await message_to_user(partner_id, user_id)
        if message_to != None:
            caption += f'\n–°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –í–ê–°üíå:\n{message_to}\n'
    await bot.send_photo(chat_id=user_id, photo=input_file, caption=caption, reply_markup=reply_markup)

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞
async def take_user_photo_tg(bot, user_id):
    user_photos = await bot.get_user_profile_photos(user_id)
    if user_photos:
        first_photo = user_photos.photos[0][-1]
        file_info = await bot.get_file(first_photo.file_id)
        file_path = file_info.file_path
        photo = await bot.download_file(file_path)
        return photo
    return None

#–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–∏–º–ø–∞—Ç–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def send_like(bot, partner_id):
    counter = await like_counts(partner_id)
    if counter:
        message = f"–í–∞–º –≤—ã—Ä–∞–∑–∏–ª–∏ —Å–∏–º–ø–∞—Ç–∏—é {counter} —á–µ–ª–æ–≤–µ–∫"
        await bot.send_message(partner_id, message, reply_markup=kb.shows_more)


#–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç username –∏ –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–ª–∞ —Å–∏–º–ø–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id user_id
async def send_username_to_partner(bot, user_id, from_user_id, username):
    await bot.send_message(user_id, f'–£ –≤–∞—Å —Å @{username} –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è, –µ—Å–ª–∏ –∑–∞–±—ã–ª –∫—Ç–æ —ç—Ç–æ, –≤–æ—Ç –∞–Ω–∫–µ—Ç–∞')
    await send_partner_form_to_user(bot, user_id, from_user_id, ReplyKeyboardRemove())

