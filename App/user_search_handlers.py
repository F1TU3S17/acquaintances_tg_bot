import App.user_keyboards as kb
from BotData.database_function import *
from App.states import *
from .function import *

from aiogram import Router, Bot, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from BotData.config import bot_token

bot = Bot(token=bot_token)
router_search = Router()

@router_search.message(F.text == '–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫')
async def in_search(message: Message, state: FSMContext):
    await message.delete()
    await state.set_state(Search.in_search)
    user = message.from_user
    user_id = user.id
    data = await state.get_data()
    count_skip = data.get('count_skip')
    flag = False
    if count_skip == None:
        await state.update_data(count_skip=0)
        flag = True
    if flag:
        data = await state.get_data()
        count_skip = data.get('count_skip')

    list_partner = await get_partner(user_id, 10, count_skip)
    if len(list_partner):
        await send_partner_form_to_user(bot, user_id, list_partner[0], kb.scroll)
        await state.update_data(last_id_search=list_partner[0])
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫(',
                                            reply_markup=kb.form_search_detail())



@router_search.message(Search.in_search)
async def in_search(message: Message, state: FSMContext):
    user = message.from_user
    user_id = user.id
    user_text = message.text
    if user_text == '‚ù§Ô∏è':
        data = await state.get_data()
        count_skip = int(data.get('count_skip')) + 1
        last_id = data.get('last_id_search')
        await like_to_db(user_id, last_id)
        await send_like(bot, last_id)
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞—à–∞ —Å–∏–º–ø–∞—Ç–∏—è')

        await state.update_data(count_skip=count_skip)
        list_partner = await get_partner(user_id, 10, count_skip)
        index = 0
        if (len(list_partner) and list_partner[index] == last_id):
            count_skip = int(data.get('count_skip')) + 1
            await state.update_data(count_skip=count_skip)
            index += 1
        if len(list_partner) > index:
            await send_partner_form_to_user(bot, user_id, list_partner[index], kb.scroll)
            await state.update_data(last_id_search=list_partner[index])
        else:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫(',
                                 reply_markup=kb.form_search_detail())
    elif user_text == '‚ùå':
        data = await state.get_data()
        count_skip = int(data.get('count_skip')) + 1
        await state.update_data(count_skip=count_skip)
        last_id = data.get('last_id_search')
        list_partner = await get_partner(user_id, 10, count_skip)
        index = 0
        if (len(list_partner) and list_partner[index] == last_id):
            count_skip = int(data.get('count_skip')) + 1
            await state.update_data(count_skip=count_skip)
            index += 1
        if len(list_partner) > index:
            await send_partner_form_to_user(bot, user_id, list_partner[index], kb.scroll)
            await state.update_data(last_id_search=list_partner[index])
        else:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫(',
                                 reply_markup=kb.form_search_detail())
    elif user_text == 'üíå':
        await state.set_state(Search.send_message)
        await message.answer('–ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup=kb.undo)

    elif user_text == '–í—ã–π—Ç–∏ –∏–∑ –ø–æ–∏—Å–∫–∞':
        await state.clear()
        await message.answer('–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –∂–¥–µ–º –≤–∞—Å –µ—â–µ!')
        await send_form_to_user(bot, user_id)
        await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É', reply_markup=kb.start_search)

    elif user_text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É':
        await state.set_state(Search.report)
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∂–∞–ª–æ–±—É', reply_markup=kb.undo)





@router_search.message(Search.send_message)
async def send_message(message: Message, state: FSMContext):
    user = message.from_user
    user_id = user.id
    user_text = message.text
    if user_text != '–û—Ç–º–µ–Ω–∏—Ç—å':
        data = await state.get_data()
        count_skip = int(data.get('count_skip')) + 1
        last_id = data.get('last_id_search')
        await like_to_db(user_id, last_id, user_text)
        await send_like(bot, last_id)
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞—à–∞ —Å–∏–º–ø–∞—Ç–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ')

        list_partner = await get_partner(user_id, 10, count_skip)
        last_id = data.get('last_id_search')
        index = 0
        if (len(list_partner) and list_partner[index] == last_id):
            count_skip = int(data.get('count_skip')) + 1
            await state.update_data(count_skip=count_skip)
            index += 1
        if len(list_partner) > index:
            await send_partner_form_to_user(bot, user_id, list_partner[index], kb.scroll)
            await state.update_data(last_id_search=list_partner[index])
        else:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫(',
                                 reply_markup=kb.form_search_detail())
        await state.set_state(Search.in_search)
    else:
        await message.answer('–•–æ—Ä–æ—à–æ, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ!')
        data = await state.get_data()
        count_skip = int(data.get('count_skip')) + 1
        await state.update_data(count_skip=count_skip)
        list_partner = await get_partner(user_id, 10, count_skip)
        last_id = data.get('last_id_search')
        index = 0
        if (len(list_partner) and list_partner[index] == last_id):
            count_skip = int(data.get('count_skip')) + 1
            await state.update_data(count_skip=count_skip)
            index += 1
        if len(list_partner) > index:
            await send_partner_form_to_user(bot, user_id, list_partner[index], kb.scroll)
            await state.update_data(last_id_search=list_partner[index])
        else:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫(',
                                 reply_markup=kb.form_search_detail())

@router_search.message(Search.report)
async def send_message(message: Message, state: FSMContext):
    user = message.from_user
    user_id = user.id
    user_message = message.text
    data = await state.get_data()
    count_skip = int(data.get('count_skip')) + 1
    await state.update_data(count_skip=count_skip)
    last_id = data.get('last_id_search')
    list_partner = await get_partner(user_id, 10, count_skip)
    await send_report(last_id, user_message)
    await message.answer('–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É')
    index = 0
    if (len(list_partner) and list_partner[index] == last_id):
        count_skip = int(data.get('count_skip')) + 1
        await state.update_data(count_skip=count_skip)
        index += 1
    if len(list_partner) > index:
        await send_partner_form_to_user(bot, user_id, list_partner[index], kb.scroll)
        await state.update_data(last_id_search=list_partner[index])
    else:
        await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∏—Å–∫(',
                             reply_markup=kb.form_search_detail())
    await state.set_state(Search.in_search)


@router_search.callback_query(lambda c: c.data.startswith("shows_more"))
async def shows_more(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.delete()
    user = callback_query.from_user
    user_id = user.id
    data = await state.get_data()
    count_skip = data.get('skip')
    await state.set_state(View_likes.in_view)
    flag = False
    if count_skip == None:
        await state.update_data(skip=0)
        flag = True
    if flag:
        data = await state.get_data()
        count_skip = data.get('skip')

    list_partner = await like_list(user_id, 10, count_skip)
    last_id = data.get('last_id_view')
    index = 0
    if (len(list_partner)):
        count_skip = int(data.get('skip')) + 1
        await state.update_data(skip=count_skip)
        index += 1
    if len(list_partner) > index:
        await send_partner_form_to_user(bot, user_id, list_partner[0], kb.view_like, True)
        await state.update_data(last_id_view=list_partner[index])
    else:
        await callback_query.message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∏–º–ø–∞—Ç–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(\n –ù–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É—Ç –µ—â–µ!')
        await state.clear()
        await send_form_to_user(bot, user_id)
        await callback_query.message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É', reply_markup=kb.start_search)


@router_search.message(View_likes.in_view)
async def view_like(message: Message, state: FSMContext):
    user = message.from_user
    user_id = user.id
    user_text = message.text
    if user_text == '‚ù§Ô∏è':
        data = await state.get_data()
        count_skip = data.get('skip')
        list_partner = await like_list(user_id, 10, count_skip)
        partner = list_partner[0]
        username_partner = get_username(partner)
        username_user = get_username(user_id)
        await message.answer(f'–£ –≤–∞—Å —Å @{username_partner} –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è')
        await send_username_to_partner(bot, partner, user_id, username_user)
        count_skip = int(data.get('skip')) + 1
        await state.update_data(skip=count_skip)
        list_partner = await like_list(user_id, 10, count_skip)
        last_id = data.get('last_id_view')
        await del_like(last_id, user_id)
        index = 0
        if (len(list_partner) and list_partner[index] == last_id):
            count_skip = int(data.get('skip')) + 1
            await state.update_data(skip=count_skip)
            index += 1
        if len(list_partner) > index:
            await send_partner_form_to_user(bot, user_id, list_partner[0], kb.view_like, True)
            await state.update_data(last_id_view=list_partner[index])
        else:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∏–º–ø–∞—Ç–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(\n –ù–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É—Ç –µ—â–µ!')
            await state.clear()
            await send_form_to_user(bot, user_id)
            await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É', reply_markup=kb.start_search)
    elif user_text == '‚ùå':
        data = await state.get_data()
        count_skip = int(data.get('skip')) + 1
        last_id = data.get('last_id_view')
        await state.update_data(skip=count_skip)
        list_partner = await like_list(user_id, 10, count_skip)
        await del_like(last_id, user_id)
        index = 0
        if (len(list_partner) and list_partner[index] == last_id):
            count_skip = int(data.get('skip')) + 1
            await state.update_data(skip=count_skip)
            index += 1
        if len(list_partner) > index:
            await send_partner_form_to_user(bot, user_id, list_partner[0], kb.view_like, True)
            await state.update_data(last_id_view=list_partner[index])
        else:
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∏–º–ø–∞—Ç–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(\n –ù–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É—Ç –µ—â–µ!')
            await state.clear()
            await send_form_to_user(bot, user_id)
            await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É', reply_markup=kb.start_search)
    elif user_text == '–í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞':
        await send_like(bot, user_id)
        await state.clear()
        await send_form_to_user(bot, user_id)
        await message.answer('–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É', reply_markup=kb.start_search)